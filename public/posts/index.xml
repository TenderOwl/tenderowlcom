<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss xmlns:yandex="http://news.yandex.ru"
     xmlns:media="http://search.yahoo.com/mrss/"
     xmlns:turbo="http://turbo.yandex.ru"
     version="2.0">
  <channel>
    <title>Posts on TenderOwl</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on TenderOwl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Oct 2022 01:26:21 +0300</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <title>Server-side Dart</title>
      <link>http://localhost:1313/posts/server-side-dart/</link>
      <pubDate>Tue, 04 Oct 2022 01:26:21 +0300</pubDate>
      
      <guid>http://localhost:1313/posts/server-side-dart/</guid>
      <description>&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Laska is under active development and is not supposed to be used in production. API may change dramatically in future versions.&lt;/p&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s not a secret that Dart&amp;rsquo;s popularity comes from the Flutter framework and its acceptance by the community. I love Flutter as well, but what I miss is server-side. How cool it could be to be a full-stack developer by using only Dart language?&lt;/p&gt;</description>
      <turbo:content>
        <![CDATA[
            <h2 id="disclaimer">Disclaimer</h2>
<p>Laska is under active development and is not supposed to be used in production. API may change dramatically in future versions.</p>
<h2 id="intro">Intro</h2>
<p>It&rsquo;s not a secret that Dart&rsquo;s popularity comes from the Flutter framework and its acceptance by the community. I love Flutter as well, but what I miss is server-side. How cool it could be to be a full-stack developer by using only Dart language?</p>
<p>There was a time, I want to start a new project and have to choose what technologies to use for the frontend and backend parts as well. Research gets me to <a href="https://aqueduct.io/">Aqueduct</a> and <a href="https://pub.dev/packages/shelf">Shelf</a>, both of them weren&rsquo;t looking actively developing and supported and that leads me to the idea to make my own small micro-framework like <a href="https://echo.labstack.com/">Echo</a> for Golang or <a href="https://bottlepy.org/">Bottle</a> for Python. And it was easy to decide: I&rsquo;ve had time and motivation :)</p>
<p>And before we get started, I&rsquo;d like to answer some questions that will definitely come up: why do we need one more framework, and what&rsquo;s the problem your framework resolves? The first one is easy: ask JavaScript developers! But OK, the real answer is competition: the more frameworks we have, the more we learn from each other and, eventually, we build better apps. The second answer: it was designed and built for micro-services and small applications. Sure, there is a way to extend it with middleware and extensions that come later, but as I said I treat it as a Dart alternative to Bottle or Echo. And when I say built I mean will be built 😄</p>
<h2 id="architecture">Architecture</h2>
<p>Laska - that&rsquo;s how the project is named - is a micro-framework, it&rsquo;s not aimed to be a full-featured app like Django. Therefore the architecture is quite simple: every request is processed by the same process while performance is based on leveraging the async nature of Dart.</p>
<p>Let&rsquo;s briefly review how it works.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21sorv8stnckxhl0yb21.png" alt="Async server diagram"></p>
<p>As we can see on the diagram, asynchronous server processing works like a charm :)</p>
<p>I did experiment with Isolates and multiprocessing, but finally, I decided it would require the developers to work with additional limitations. It is not the way I want to use any kind of software, so why does anyone should do it? Programming should be easy and fun therefore there is no kind of parallelism in Laska.</p>
<h2 id="lets-build-something">Let&rsquo;s build something</h2>
<p>There is a trivial way to present programming languages and frameworks called &lsquo;Hello world&rsquo;. Let&rsquo;s be trivial!</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#ed9d13">&#39;package:laska/laska.dart&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">void</span> main() <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">final</span> laska = Laska();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  laska.GET(<span style="color:#ed9d13">&#39;/hello/:name&#39;</span>,
</span></span><span style="display:flex;"><span>      (context) <span style="color:#6ab825;font-weight:bold">async</span> =&gt; <span style="color:#6ab825;font-weight:bold">await</span> context.Text(<span style="color:#ed9d13">&#34;Hello </span><span style="color:#ed9d13">${</span>context.param(<span style="color:#ed9d13">&#39;name&#39;</span>)<span style="color:#ed9d13">}</span><span style="color:#ed9d13">!&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">await</span> run(laska);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It&rsquo;s easy to understand what&rsquo;s going on here:</p>
<ul>
<li>initialize a Laska object</li>
<li>add a handler for GET requests at the route &lsquo;/hello/:name&rsquo;, where <code>name</code> is a placeholder for context parameters</li>
<li>code a handler that returns a string with a parameter given in the path</li>
<li>and run the server</li>
</ul>
<p>That&rsquo;s it, an asynchronous server is up and running on http://localhost:3789.</p>
<h2 id="more-realistic-example">More realistic example</h2>
<p>Surely, &lsquo;Hello world&rsquo; is not a kind of real-world application someone will deploy to production. The more realistic would be to build a server that logs user requests to the stdout and has routes that require authorization.</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dart" data-lang="dart"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">import</span> <span style="color:#ed9d13">&#39;package:laska/laska.dart&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic">// Custom middleware that checks user access.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span><span style="color:#6ab825;font-weight:bold">class</span> <span style="color:#447fcf;text-decoration:underline">Acl</span> <span style="color:#6ab825;font-weight:bold">implements</span> Middleware {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">final</span> allowedRoles;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Acl(<span style="color:#6ab825;font-weight:bold">this</span>.allowedRoles);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a61717;background-color:#e3d2d2">@</span>override
</span></span><span style="display:flex;"><span>  Future&lt;Function&gt; execute(Function next, Context context) <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">return</span> (Context c) {
</span></span><span style="display:flex;"><span>      <span style="color:#999;font-style:italic">// In this case it&#39;s simple check:
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>      <span style="color:#999;font-style:italic">// Does the request contains `role` header with `admin` value.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>      <span style="color:#6ab825;font-weight:bold">final</span> role = context.request.headers.value(<span style="color:#ed9d13">&#39;role&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#999;font-style:italic">// If the header&#39;s `role` is not in `allowedRoles`, reject the request.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>      <span style="color:#6ab825;font-weight:bold">if</span> (!allowedRoles.contains(role)) {
</span></span><span style="display:flex;"><span>        context.Text(<span style="color:#ed9d13">&#39;Role </span><span style="color:#ed9d13">$</span>role<span style="color:#ed9d13"> is not allowed.&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#6ab825;font-weight:bold">return</span> <span style="color:#6ab825;font-weight:bold">null</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      print(<span style="color:#ed9d13">&#39;Role </span><span style="color:#ed9d13">$</span>role<span style="color:#ed9d13"> is allowed.&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#999;font-style:italic">// Don&#39;t forget to call the handler.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>      <span style="color:#6ab825;font-weight:bold">return</span> next(c);
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic">// Custom middleware that prints request path and given prefix.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span><span style="color:#6ab825;font-weight:bold">class</span> <span style="color:#447fcf;text-decoration:underline">Logger</span> <span style="color:#6ab825;font-weight:bold">implements</span> Middleware {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">String</span> prefix;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Logger(<span style="color:#6ab825;font-weight:bold">this</span>.prefix);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a61717;background-color:#e3d2d2">@</span>override
</span></span><span style="display:flex;"><span>  Future&lt;Function&gt; execute(Function next, Context context) <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">return</span> (Context c) {
</span></span><span style="display:flex;"><span>      print(<span style="color:#ed9d13">&#39;</span><span style="color:#ed9d13">$</span>prefix<span style="color:#ed9d13">: Path: </span><span style="color:#ed9d13">${</span>context.path<span style="color:#ed9d13">}</span><span style="color:#ed9d13">&#39;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#999;font-style:italic">// Don&#39;t forget to call the handler.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>      <span style="color:#6ab825;font-weight:bold">return</span> next(c);
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">void</span> main() <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">final</span> laska = Laska();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">final</span> acl_middleware = Acl([<span style="color:#ed9d13">&#39;admin&#39;</span>]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#999;font-style:italic">// Add global middleware
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>  laska.Use(Logger(<span style="color:#ed9d13">&#39;global&#39;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#999;font-style:italic">// Create handler with per-route middlewares: logger and acl
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>  laska.GET(<span style="color:#ed9d13">&#39;/secret&#39;</span>, secretHandler,
</span></span><span style="display:flex;"><span>      middlewares: {Logger(<span style="color:#ed9d13">&#39;route&#39;</span>), acl_middleware});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#999;font-style:italic">// Add route handler, only global middleware will apply
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>  laska.GET(<span style="color:#ed9d13">&#39;/users&#39;</span>, getUsers);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#999;font-style:italic">// Add route with acl middleware, but only for the POST method.
</span></span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"></span>  laska.POST(<span style="color:#ed9d13">&#39;/users&#39;</span>, getUsers, middlewares: {acl_middleware});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">await</span> run(laska);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">void</span> secretHandler(Context context) <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">await</span> context.Text(<span style="color:#ed9d13">&#39;You have access to secret path!&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">void</span> getUsers(Context context) <span style="color:#6ab825;font-weight:bold">async</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#6ab825;font-weight:bold">await</span> context.JSON([
</span></span><span style="display:flex;"><span>    {<span style="color:#ed9d13">&#39;id&#39;</span>: <span style="color:#3677a9">1</span>, <span style="color:#ed9d13">&#39;name&#39;</span>: <span style="color:#ed9d13">&#39;Make something useful&#39;</span>, <span style="color:#ed9d13">&#39;status&#39;</span>: <span style="color:#3677a9">0</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#ed9d13">&#39;id&#39;</span>: <span style="color:#3677a9">2</span>, <span style="color:#ed9d13">&#39;name&#39;</span>: <span style="color:#ed9d13">&#39;Make new website&#39;</span>, <span style="color:#ed9d13">&#39;status&#39;</span>: <span style="color:#3677a9">1</span>},
</span></span><span style="display:flex;"><span>  ]);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I hope this code is self-explanatory but you can ask me  any questions  in comments :)</p>
<h2 id="roadmap">Roadmap</h2>
<p>🅿️ - P is for planned.</p>
<ul>
<li>✅ Dynamic routing with placeholders</li>
<li>✅ Middlewares</li>
<li>✅ JSON handling</li>
<li>✅ Form handling</li>
<li>✅ Null-Safety</li>
<li>🅿️ Logging</li>
<li>🅿️ Serve static files</li>
<li>🅿️ Template rendering?</li>
<li>🅿️ Extensions</li>
<li>🅿️ Health checks</li>
<li>❓ What&rsquo;s more?</li>
</ul>
<h2 id="the-end">The end</h2>
<p>I&rsquo;d love to see more server-side Dart projects and hope you do too. If you think so it would be very encouraging if you star the project on <a href="https://github.com/TenderOwl/laska">GitHub</a> and like it on Dev.to.</p>
        ]]>
    </turbo:content>
    </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <title>What&#39;s new in Norka 1.0</title>
      <link>http://localhost:1313/posts/whats-new-in-norka-1-0/</link>
      <pubDate>Mon, 21 Feb 2022 17:26:21 +0300</pubDate>
      
      <guid>http://localhost:1313/posts/whats-new-in-norka-1-0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TenderOwl/Norka/master/data/screenshots/norka-editor.png&#34; alt=&#34;Norka editor&#34;&gt;&lt;/p&gt;
&lt;p&gt;Nearly two years ago, Norka was born, a note-taking application made specifically for elementary OS and also distributed via Flathub. This version was far from version 1.0, its functionality was limited only to essential things: editing, searching, autosaving. Later, it introduced document search, export to various formats, spell checking, convenient keyboard shortcuts for editing, the ability to preview documents in HTML and statistics, etc. This was enough to start, but there was room for improvement. One possibility might be the ability to group notes in a folder and structure the user&amp;rsquo;s resources in a certain way. So what&amp;rsquo;s new comes in version 1.0?&lt;/p&gt;</description>
      <turbo:content>
        <![CDATA[
            <p><img src="https://raw.githubusercontent.com/TenderOwl/Norka/master/data/screenshots/norka-editor.png" alt="Norka editor"></p>
<p>Nearly two years ago, Norka was born, a note-taking application made specifically for elementary OS and also distributed via Flathub. This version was far from version 1.0, its functionality was limited only to essential things: editing, searching, autosaving. Later, it introduced document search, export to various formats, spell checking, convenient keyboard shortcuts for editing, the ability to preview documents in HTML and statistics, etc. This was enough to start, but there was room for improvement. One possibility might be the ability to group notes in a folder and structure the user&rsquo;s resources in a certain way. So what&rsquo;s new comes in version 1.0?</p>
<h2 id="folders">Folders</h2>
<p><img src="https://raw.githubusercontent.com/TenderOwl/Norka/master/data/screenshots/norka-grid.png" alt="Folders and documents"></p>
<p>The main and most important innovation is the ability to structure documents using folders. Folders can be created by clicking on a button in the header bar or by dragging documents onto each other. In this case, you will see a window displaying a suggestion for a folder name.</p>
<p>Folders can be moved from one to another. The level is not limited, but there is a limit on a path length, which, by the way, are found under the title of the window in the title. Also, some characters cannot be used in the names, we plan to fix this in the next releases.</p>
<p>The backup function also includes the structure of the library and exports documents by putting them in the right folders. This way you will get a complete copy of the library on disk.</p>
<h2 id="new-fonts-and-updated-theme">New fonts and updated theme</h2>
<p>We continue to work on using Norka not only in terms of functionality but also in terms of UI. Starting with version 1.0 Norka will use the <a href="https://github.com/iaolo/iA-Fonts">iA Writer Duospace</a> font. Thank you for sharing them with the community. The color scheme of the editor has also been updated.</p>
<h2 id="actions">Actions</h2>
<p>In many desktop environments, it is possible to set up global hotkeys to trigger specific actions in applications. For example, take a screenshot or share a file. Now you can use the command to quickly take notes with Norka. This action can also be implemented as a command to call from hot corners in GNOME or <a href="https://elementary.io/docs/learning-the-basics#multitasking">elementary OS</a>.</p>
<h2 id="specifying-the-language-for-spell-checking">Specifying the language for spell checking</h2>
<p>In one of the latest releases, we switched from GtkSpell to use GSpell, but at the same time, Norka lost the ability to specify which language to use for this check. And while this isn&rsquo;t a problem if you&rsquo;re writing in English, it creates problems for writers in other languages. This setting can now be changed in the application.</p>
<h2 id="import-and-formatting-fixes">Import and formatting fixes</h2>
<p>As with spell checking, one might not have noticed that for non-Latin languages, hotkeys are used to format text, leading to unexpected results. For example, when inserting a title, some of the text could be erased. Now we have fixed this problem, Norka correctly inserts formatting without text loss.</p>
<p>We also fixed auto-completion of lists: when pressing Enter, Norka will check if an item text has been entered, and if not, then inserting the list formatting ends.</p>
<p>For those who use drag-n-drop to import, the problem turned into the fact that when importing several files in sequence, the documents / those that were used the first time that time were re-imported instead of the last ones. We have fixed this issue, there is no more reason to worry about erroneous imports and prevent the deletion of redundant copies.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We keep improving Norka even further. We aimed to become the best writing app and note editor for Linux in the future, and possibly not only a Linux.</p>
<p>Thanks to everyone who uses Norka!</p>

        ]]>
    </turbo:content>
    </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <title>Elementary Os Contractor in Action</title>
      <link>http://localhost:1313/posts/elementary-os-contractor-in-action/</link>
      <pubDate>Sun, 24 Oct 2021 00:04:31 +0300</pubDate>
      
      <guid>http://localhost:1313/posts/elementary-os-contractor-in-action/</guid>
      <description>&lt;p&gt;How to use elementary OS Contractor to simplify your daily routines.&lt;/p&gt;</description>
      <turbo:content>
        <![CDATA[
            <p>How to use elementary OS Contractor to simplify your daily routines.</p>
<h2 id="intro">Intro</h2>
<p>Almost two years ago I lost my iMac and it brought me an idea to see what&rsquo;s changed in the Linux world for 10 years. Starting from Ubuntu and Fedora I finally came to the elementary OS project&rsquo;s website. And it was quite astonishing. In comparison to the other distributions elementary had its view on how the operating system should view, how to make apps, its own design language and <a href="https://docs.elementary.io/develop/">developers documentation</a>. Thereby the decision to move to this OS was easy.</p>
<p>For now, it is almost two years since I moved from macOS to elementary OS as my daily driver. And, as I said earlier, I&rsquo;m a developer. After looking for a native text editor I made myself think to make <a href="https://tenderowl.com/work/norka/">Norka</a>. But, this article is about the distinct application. Actually, I&rsquo;m not the author of it, the app is already a part of elementary itself - <a href="https://github.com/elementary/contractor">Contractor</a>.</p>
<h2 id="contractor">Contractor</h2>
<p>The idea is very simple: users can write a contract - a file which instructs the Contractor how to call the command - and it comes available in any supported apps: Files, Photos, etc.</p>
<h2 id="action">Action</h2>
<p>I suppose you&rsquo;re already got the idea of how the Contractor can help you in your daily work, but let&rsquo;s make a contract that&hellip; well.. help you share any file via Telegram. What do we need for it?</p>
<ul>
<li>install Telegram</li>
<li>get the command</li>
<li>create a contract</li>
<li>test it!</li>
</ul>
<p>Because it differences in one case of installation on another I will write for the <a href="https://flathub.org/apps/details/org.telegram.desktop">Flathub version</a>.</p>
<p>Let&rsquo;s dive in!</p>
<h3 id="install-telegram">Install Telegram</h3>
<p>As of <a href="https://elementary.io">elementary OS</a> user, I can simply go to flathub.org and press the &ldquo;Install&rdquo; button. Sideload app do the job. But what about other distros? Well, the right way is completely covered on the Flathub site so we don&rsquo;t wanna go through all steps :)</p>
<h3 id="get-the-right-command">Get the right command</h3>
<p>To write a good contract we need to find out what command does the job we need. In some cases, it could be easily extracted from <code>--help</code> info or <code>man</code> pages. Luckily Telegram command-line switches are fully described in the GitHub Wiki: <a href="https://github.com/telegramdesktop/tdesktop/wiki/Command-Line-Switches">https://github.com/telegramdesktop/tdesktop/wiki/Command-Line-Switches</a>. <code>-sendpath &lt;file&gt;</code> - the desired switch.</p>
<p>One part is done, let&rsquo;s figure out the second one. To run the application with a command-line switch installed via Flatpak we have to call <code>flatpak run</code> command. Thus our command will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>flatpak run org.telegram.desktop -sendpath %f
</span></span></code></pre></div><p>This is already enough to make a contract!</p>
<h3 id="contract">Contract</h3>
<p>Every contract should be placed inside <code>~/.local/share/contractor</code> if we talking about a specific user or inside <code>/usr/share/contractor</code> for the system-wide availability.</p>
<p>Simple <code>.contract</code> file example:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">[Contractor Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name</span>=<span style="color:#ed9d13">Mount</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">MimeType</span>=<span style="color:#ed9d13">application/x-cd-image;application/x-raw-disk-image</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">gnome-disk-image-mounter %f</span>
</span></span></code></pre></div><p>This example shows how to make a command that will mount disk images to the filesystem. We need something different.</p>
<p>Create <code>telegram-share.contract</code> file and open it in <a href="https://github.com/elementary/code">Code</a> or your text editor of choice.
Change <code>Name</code> to <code>Share via Telegram</code> and <code>Exec</code> field to a command we discovered earlier. If English is not your primary language you can add localized <code>Name</code> by adding <code>Name[language code]</code> option. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#bbb">Name[ru]</span>=<span style="color:#ed9d13">Поделиться в Telegram</span>
</span></span></code></pre></div><p>Last but not least we have to set what mime-types has to activate the Share command. Of course, it doesn&rsquo;t mean to be only disk images
and here is the special type - <code>!inode</code> - which means any file you select no matter archive it or pdf.</p>
<p>Let&rsquo;s see what we&rsquo;ve got!</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">[Contractor Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name</span>=<span style="color:#ed9d13">Share via Telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name[ru]</span>=<span style="color:#ed9d13">Поделиться в Telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Icon</span>=<span style="color:#ed9d13">telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">MimeType</span>=<span style="color:#ed9d13">!inode;</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">flatpak run org.telegram.desktop -sendpath %f</span>
</span></span></code></pre></div><p>Now save your contract and test it by clicking on any file in Files and pressing the &ldquo;Share via Telegram&rdquo; option.</p>
<p>More examples listed in the <a href="https://github.com/elementary/contractor#examples">Contractor repository</a>.</p>
<h2 id="bonus">Bonus</h2>
<h3 id="notification">Notification</h3>
<p>Sometimes you wanna indicate to yourself when the contract will be completed. To make it happen it&rsquo;s not enough to call just one command, you need to send a notification somehow. Again, elementary already has an application for it named <code>notify-send</code>, and all we need is to combine all the commands into one with help of <code>sh</code>. As you may see in the Tips section it is easy enough:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">sh -c &#34;flatpak run org.telegram.desktop -sendpath %f &amp;&amp; notify-send &#39;File sent&#39; &#39;%f successfully sent via Telegram&#39;&#34;</span>
</span></span></code></pre></div><p>Final version:</p>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">[Contractor Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name</span>=<span style="color:#ed9d13">Share via Telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name[ru]</span>=<span style="color:#ed9d13">Поделиться в Telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Icon</span>=<span style="color:#ed9d13">telegram</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">MimeType</span>=<span style="color:#ed9d13">!inode;</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">sh -c &#34;flatpak run org.telegram.desktop -sendpath %f &amp;&amp; notify-send &#39;File sent&#39; &#39;%f successfully sent via Telegram&#39;&#34;</span>
</span></span></code></pre></div><h3 id="install-deb-packages">Install .deb packages</h3>
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">[Contractor Entry]</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name</span>=<span style="color:#ed9d13">Install app</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Name[ru]</span>=<span style="color:#ed9d13">Установить приложение</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">MimeType</span>=<span style="color:#ed9d13">application/vnd.debian.binary-package</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Description</span>=<span style="color:#ed9d13">Quickly install .deb package</span>
</span></span><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">sh -c &#34;pkexec apt install %u &amp;&amp; notify-send &#39;the App installed&#39; -a Apt&#34;</span>
</span></span></code></pre></div><h2 id="tips">Tips:</h2>
<ul>
<li>Use pkexec to ask for root permissions. Example:
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">pkexec chmod +x %U</span>
</span></span></code></pre></div></li>
<li>To call multiple commands at once try to use sh:
<div class="highlight"><pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#bbb">Exec</span>=<span style="color:#ed9d13">sh -c &#34;echo &#39;step 1&#39; &amp;&amp; notify-send &#39;Done&#39; &amp;&amp; echo &#39;step 2&#39;&#34;</span>
</span></span></code></pre></div></li>
</ul>
        ]]>
    </turbo:content>
    </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <title>How to use WebSockets with Python and GTK&#43;</title>
      <link>http://localhost:1313/posts/how-to-use-websockets-with-python-and-gtk-copy/</link>
      <pubDate>Fri, 18 Dec 2020 11:26:21 +0300</pubDate>
      
      <guid>http://localhost:1313/posts/how-to-use-websockets-with-python-and-gtk-copy/</guid>
      <description>&lt;p&gt;Hey there! I&amp;rsquo;m here to present you an amazing trip to the native apps with WebSockets!&lt;/p&gt;</description>
      <turbo:content>
        <![CDATA[
            <p>Hey there! I&rsquo;m here to present you an amazing trip to the native apps with WebSockets!</p>
<p>In this current case we will be using these technologies:</p>
<ul>
<li>Python</li>
<li>GTK+</li>
<li>Libsoup</li>
<li>Websocket messaging</li>
</ul>
<p>If you&rsquo;re wondering how to build a native GTK+ chat app, let&rsquo;s dive with me!</p>
<h2 id="theory">Theory</h2>
<p><a href="https://en.wikipedia.org/wiki/WebSocket">WebSockets</a> is a protocol designed to provide a consistent connection between the client and a server where both can send data to each other. It&rsquo;s like a wire over the Internet or a tube, distinct of regular HTTP, where the client only can send data to the server and it gets a response immediately.</p>
<p>Benefits of this approach are quite obvious: the server can push the data to the client when it comes to server from another client or generated somewhere on the backend. And the client doesn&rsquo;t need to refresh the page or do something to fetch new data, it just comes to the client by itself.</p>
<p>More information about WebSockets you can find on the <a href="http://websocket.org/aboutwebsocket.html">websocket.org</a>.</p>
<p>What I want to show you in this article it is how to connect to a WebSocket server and send or receive data from it in a native GTK+ application.</p>
<p>I will code my app in elementary OS using <a href="https://wiki.gnome.org/Apps/Builder">GNOME Builder</a>, but the same logic should work anywhere where <a href="https://gtk.org">GTK+</a> and <a href="https://libsoup.org">libsoup</a> are available and all code could be easily adapted even for macOS.</p>
<h2 id="ui">UI</h2>
<p>The app logic is quite simple yet representative. The UI will consist of two screens (<code>Gtk.Grid</code>) placed in <code>Gtk.Stack</code>. The first screen contains widgets required to connect to the server such as <code>Gtk.Entry</code> for server address, button to initiate a connection and a spinner to show the state.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/6peeanzovpi8tbpp38rn.png" alt="First page"></p>
<p>The second screen is more complex. Purpose of this is to enter the message, send it to the server and show the server&rsquo;s response in <code>Gtk.TextView</code>. Thus we need <code>Gtk.Grid</code> to place widgets. <code>Gtk.Entry</code> and <code>Gtk.Button</code> the same way we did it on the first page. And to display log we need <code>Gtk.TextView</code> placed within <code>Gtk.ScrolledWindow</code> in case there will be much more logs than the window can contain and the scrolling will be as much useful feature as it could :)</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/b9we4xc3cwi202qr5c86.png" alt="Second page"></p>
<h3 id="connection-page">Connection page</h3>
<p>Let&rsquo;s start building! Create a new project in Builder, as the language, we will use Python 3.6+.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/6s87by1ljgku3jsp9h5p.png" alt="New project"></p>
<p>IDE will generate a base app structure with all we need, and all we need is just two files: <code>window.ui</code> and <code>window.py</code>.</p>
<p>Firstly, we need a correct UI for our app, so open <code>window.ui</code>. file and replace the &ldquo;hello world&rdquo; <code>Label</code> with <code>Gtk.Stack</code>. We will need two pages.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/h289zyc16lxbjwx4o840.png" alt="Stack properties"></p>
<p>Name the first screen &ldquo;connection&rdquo;, and place onto it <code>Gtk.Grid</code> with 3 rows and columns. In the central cell place <code>Gtk.Box</code> with 4 rows:</p>
<ol>
<li><code>Gtk.Label</code> with text &ldquo;Connection&rdquo;</li>
<li><code>Gtk.Entry</code>. Set its id to &ldquo;host_entry&rdquo;</li>
<li><code>Gtk.Button</code> with id &ldquo;connect_btn&rdquo;</li>
<li><code>Gtk.Spinner</code>. Call it whatever you like, mine is just a &ldquo;spinner&rdquo; :)</li>
</ol>
<p>That&rsquo;s enough for the &ldquo;Connection&rdquo; page.</p>
<h3 id="chat-page">Chat page</h3>
<p>Moving further. The second screen is a bit more complex. Again, we need <code>Gtk.Grid</code> to put all the widgets we need. But for now, it will be a grid with just 2 rows and 2 columns.</p>
<p>First row with two widgets in its own cells:</p>
<ul>
<li><code>Gtk.Entry</code> with id &ldquo;message_entry&rdquo;</li>
<li><code>Gtk.Button</code> with id &ldquo;send_btn&rdquo;</li>
</ul>
<p>On the second row place <code>Gtk.ScrolledWindow</code>, no id required because we don&rsquo;t need to call its method. Inside this ScrolledWindow put a new <code>Gtk.TextView</code> widget. Set its id to &ldquo;log_view&rdquo;.</p>
<p>To make it looks more convenient, set <em>width</em> = 2 in the container&rsquo;s props inside attribute editor for ScrolledWindow.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/oiu7wgjgguqg4g0dn4ue.png" alt="ScrolledWindow packing"></p>
<h2 id="logic">Logic</h2>
<p>Ok, out UI is ready enough to build some logic for it, finally :)</p>
<p>Open <code>window.py</code> and add class vars to connect with widgets from the <code>.ui</code> file.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#999;font-style:italic"># Stack with pages</span>
</span></span><span style="display:flex;"><span>screens = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"># Connection page widgets</span>
</span></span><span style="display:flex;"><span>host_entry = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>connect_btn = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>disconnect_btn = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>spinner = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"># Chat page widgets</span>
</span></span><span style="display:flex;"><span>send_btn = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>message_entry = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>log_view = Gtk.Template.Child()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#999;font-style:italic"># Declare some class-vars</span>
</span></span><span style="display:flex;"><span>self.session = <span style="color:#6ab825;font-weight:bold">None</span>
</span></span><span style="display:flex;"><span>self.connection = <span style="color:#6ab825;font-weight:bold">None</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Well, now we are able to call methods of these widgets. But also, we have to handle its signals. Let&rsquo;s connect &ldquo;connect_btn&rdquo;:</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> __init__(self, **kwargs):
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Some app logic</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    self.connect_btn.connect(<span style="color:#ed9d13">&#39;clicked&#39;</span>, self.on_connect_clicked)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">on_connect_clicked</span>(self, widget):
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Check if there is a text inside the host_entry</span>
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># and grab focus if its empty</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#6ab825;font-weight:bold">not</span> self.host_entry.get_text():
</span></span><span style="display:flex;"><span>        self.host_entry.grab_focus()
</span></span><span style="display:flex;"><span>        <span style="color:#6ab825;font-weight:bold">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Show user we are trying to connect</span>
</span></span><span style="display:flex;"><span>    self.spinner.start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Init libsoup Session, create message and start connection</span>
</span></span><span style="display:flex;"><span>    self.session = Soup.Session()
</span></span><span style="display:flex;"><span>    msg = Soup.Message.new(<span style="color:#ed9d13">&#34;GET&#34;</span>, self.host_entry.get_text())
</span></span><span style="display:flex;"><span>    self.session.websocket_connect_async(msg, <span style="color:#6ab825;font-weight:bold">None</span>, <span style="color:#6ab825;font-weight:bold">None</span>, <span style="color:#6ab825;font-weight:bold">None</span>, self.on_connection)
</span></span></code></pre></td></tr></table>
</div>
</div><p>The code above is quite straightforward:</p>
<ul>
<li>Get the server address</li>
<li>Create new <a href="https://lazka.github.io/pgi-docs/#Soup-2.4/classes/Session.html"><code>Session</code></a></li>
<li>Init the connection with <a href="https://lazka.github.io/pgi-docs/#Soup-2.4/classes/Session.html%23Soup.Session.websocket_connect_async"><code>websocket_connect_async</code></a></li>
</ul>
<p>As a callback for connection function, we put <code>on_connection</code> method, which takes the result of this operation and finish the process.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">on_connection</span>(self, session, result):
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># Finish connection process</span>
</span></span><span style="display:flex;"><span>        self.connection = session.websocket_connect_finish(result)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># If we here, the connection went correctly</span>
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># Connect `message` handler to the connection</span>
</span></span><span style="display:flex;"><span>        self.connection.connect(<span style="color:#ed9d13">&#39;message&#39;</span>, self.on_message)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># Show to user all is OK and switch to the Chat page</span>
</span></span><span style="display:flex;"><span>        self.screens.set_visible_child_name(<span style="color:#ed9d13">&#39;chat&#39;</span>)
</span></span><span style="display:flex;"><span>        self.disconnect_btn.set_visible(<span style="color:#6ab825;font-weight:bold">True</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">except</span> <span style="color:#bbb">Exception</span> <span style="color:#6ab825;font-weight:bold">as</span> e:
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># In case something goes wrong just print an exception</span>
</span></span><span style="display:flex;"><span>        <span style="color:#24909d">print</span>(e)
</span></span><span style="display:flex;"><span>        self.session = <span style="color:#6ab825;font-weight:bold">None</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">finally</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#999;font-style:italic"># Don&#39;t forget to show a user that process is finished.</span>
</span></span><span style="display:flex;"><span>        self.spinner.stop()
</span></span></code></pre></td></tr></table>
</div>
</div><p>We are almost done! All we need to do more is to handle click event from the &ldquo;send_btn&rdquo; and display messages in the &ldquo;log_view&rdquo;.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">on_message</span>(self, connection, msg_type, message):
</span></span><span style="display:flex;"><span>    msg = <span style="color:#ed9d13">f</span><span style="color:#ed9d13">&#39;&lt;b&gt;RECEIVED:&lt;/b&gt; </span><span style="color:#ed9d13">{</span>message.get_data().decode()<span style="color:#ed9d13">}</span><span style="color:#ed9d13">\n</span><span style="color:#ed9d13">&#39;</span>
</span></span><span style="display:flex;"><span>    self.buffer.insert_markup(self.buffer.get_start_iter(),
</span></span><span style="display:flex;"><span>                              msg,
</span></span><span style="display:flex;"><span>                              <span style="color:#24909d">len</span>(msg))
</span></span></code></pre></td></tr></table>
</div>
</div><p>Could it be more simple than that? :wink: Just to display a message in a more readable way we add some Pango markup and use <a href="https://lazka.github.io/pgi-docs/#Gtk-3.0/classes/TextBuffer.html%23Gtk.TextBuffer.insert_markup"><code>insert_markup</code></a> method of <code>Gtk.TextBuffer</code> to&hellip; insert markup!</p>
<p>Last, but not least required thing is a handler for &ldquo;send_btn&rdquo; signal.</p>
<div class="highlight"><div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#6ab825;font-weight:bold">def</span> <span style="color:#447fcf">on_send_clicked</span>(self, widget):
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Get the message from the Entry</span>
</span></span><span style="display:flex;"><span>    msg = self.message_entry.get_text()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># If there is no message - grab focus.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6ab825;font-weight:bold">if</span> <span style="color:#6ab825;font-weight:bold">not</span> msg:
</span></span><span style="display:flex;"><span>        self.message_entry.grab_focus()
</span></span><span style="display:flex;"><span>        <span style="color:#6ab825;font-weight:bold">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#999;font-style:italic"># Send a text to the server.</span>
</span></span><span style="display:flex;"><span>    self.connection.send_text(msg)
</span></span></code></pre></td></tr></table>
</div>
</div><p>For our simple case, all we need is just the <a href="https://lazka.github.io/pgi-docs/#Soup-2.4/classes/WebsocketConnection.html%23Soup.WebsocketConnection.send_text"><code>send_text</code></a> method. But libsoup could do a lot of different stuff, such as <a href="https://lazka.github.io/pgi-docs/#Soup-2.4/classes/WebsocketConnection.html%23Soup.WebsocketConnection.send_binary"><code>send_binary</code></a> or emit a signal if something <a href="https://lazka.github.io/pgi-docs/#Soup-2.4/classes/WebsocketConnection.html%23Soup.WebsocketConnection.signals.error">goes wrong</a>.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/6th5fr8cow67bmb8nh3z.gif" alt="Spacebeam"></p>
<h2 id="conclusion">Conclusion</h2>
<p>Simple yet descriptive example of how to start building your GTK+ app with WebSockets inside. Maybe you will create a new chat app?</p>
<p>Stay tuned if you want to read more! Or go to the docs from the Links section.</p>
<p>Anyway, good luck!</p>
<h2 id="links">Links</h2>
<p>Source code:
<a href="https://github.com/amka/pygobject-gtk-websocket-app">https://github.com/amka/pygobject-gtk-websocket-app</a></p>
<p>Docs:</p>
<ul>
<li><a href="https://websocket.org/">https://websocket.org/</a></li>
<li><a href="https://lazka.github.io/pgi-docs/#Gtk-3.0">https://lazka.github.io/pgi-docs/#Gtk-3.0</a></li>
<li><a href="https://lazka.github.io/pgi-docs/#Soup-2.4">https://lazka.github.io/pgi-docs/#Soup-2.4</a></li>
</ul>
        ]]>
    </turbo:content>
    </item>
    
  </channel>
</rss>
